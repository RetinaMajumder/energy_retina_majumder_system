import streamlit as st
st.title("Hello, Streamlit!")
st.write("If you see this, the app is running.")

import streamlit as st
import numpy as np
import matplotlib.pyplot as plt

# Constants
GRAVITY = 9.81  # m/s^2
WATER_DENSITY = 1000  # kg/m^3

def calculate_geothermal_heat_transfer(temp_celsius, pipe_area=1.0, pipe_thickness=0.01, thermal_conductivity=15.0):
    """
    Calculate heat transfer from geothermal source to steam generator.
    
    Parameters:
        temp_celsius (float): Temperature of geothermal heat source in °C.
        pipe_area (float): Cross-sectional area of the pipe in m^2.
        pipe_thickness (float): Thickness of the pipe in meters.
        thermal_conductivity (float): Thermal conductivity of pipe material in W/m·K.
    
    Returns:
        float: Heat transfer rate in Watts.
    """
    steam_generator_temp = 100  # °C assumed constant temperature inside steam generator
    delta_temp = temp_celsius - steam_generator_temp
    heat_transfer = (thermal_conductivity * pipe_area * delta_temp) / pipe_thickness
    return max(heat_transfer, 0)  # Heat transfer can't be negative

def calculate_electricity_from_heat(heat_input, turbine_efficiency=0.35):
    """
    Calculate electric power output from heat input using turbine efficiency.
    
    Parameters:
        heat_input (float): Heat input in Watts.
        turbine_efficiency (float): Efficiency factor (0-1).
    
    Returns:
        float: Electric power output in Watts.
    """
    return heat_input * turbine_efficiency

def calculate_wasted_energy_heat(input_electricity, wasted_fraction=0.5):
    """
    Calculate heat generated by converting wasted electricity via resistive heating.
    
    Parameters:
        input_electricity (float): Total input electric power in Watts.
        wasted_fraction (float): Fraction of input power that is wasted (0-1).
    
    Returns:
        float: Heat generated from wasted electricity in Watts.
    """
    wasted_energy = input_electricity * wasted_fraction
    return wasted_energy

def calculate_waterfall_turbine_power(flow_rate_m3s, height_m, turbine_efficiency=0.8):
    """
    Calculate power output of waterfall turbine.
    
    Parameters:
        flow_rate_m3s (float): Water flow rate in cubic meters per second.
        height_m (float): Height of the waterfall in meters.
        turbine_efficiency (float): Efficiency of the turbine (0-1).
    
    Returns:
        float: Electric power output in Watts.
    """
    potential_power = WATER_DENSITY * GRAVITY * height_m * flow_rate_m3s
    electric_power = potential_power * turbine_efficiency
    return electric_power

def main():
    st.title("Sustainable Electricity Generation Prototype")
    
    st.markdown("""
    This prototype simulates electricity generation from two systems:
    1. Geothermal + Wasted Energy Recovery
    2. Mountain-Attached Waterfall Turbine

    Adjust the parameters below to see the estimated power outputs.
    """)

    # --- Geothermal + Wasted Energy Recovery Inputs ---
    st.header("1. Geothermal & Wasted Energy Recovery System")

    geo_temp = st.slider("Geothermal Source Temperature (°C)", min_value=150, max_value=900, value=600, step=10)
    input_electricity = st.number_input("Input Electrical Energy (Watts)", min_value=1000, max_value=1_000_000, value=50_000, step=1000)
    wasted_fraction = st.slider("Fraction of Electricity Wasted (0-1)", min_value=0.0, max_value=1.0, value=0.5, step=0.01)

    # Calculate heat transfer and electricity generation
    heat_geo = calculate_geothermal_heat_transfer(geo_temp)
    heat_wasted = calculate_wasted_energy_heat(input_electricity, wasted_fraction)
    total_heat_input = heat_geo + heat_wasted
    electric_output_geo = calculate_electricity_from_heat(total_heat_input)

    # Display results
    st.write(f"Heat from geothermal source: **{heat_geo:,.2f} W**")
    st.write(f"Heat recovered from wasted electricity: **{heat_wasted:,.2f} W**")
    st.write(f"Total heat input to steam generators: **{total_heat_input:,.2f} W**")
    st.write(f"Electricity generated from geothermal + wasted energy: **{electric_output_geo:,.2f} W**")

    # --- Waterfall Turbine Inputs ---
    st.header("2. Mountain-Attached Waterfall Turbine System")

    flow_rate = st.slider("Water Flow Rate (m³/s)", min_value=0.1, max_value=10.0, value=1.0, step=0.1)
    waterfall_height = st.slider("Waterfall Height (meters)", min_value=5, max_value=200, value=50, step=1)
    turbine_efficiency = st.slider("Waterfall Turbine Efficiency (0-1)", min_value=0.1, max_value=1.0, value=0.8, step=0.01)

    electric_output_waterfall = calculate_waterfall_turbine_power(flow_rate, waterfall_height, turbine_efficiency)
    st.write(f"Electricity generated from waterfall turbine: **{electric_output_waterfall:,.2f} W**")

    # --- Total Output ---
    st.header("3. Combined Total Electricity Generation")
    total_electricity_generated = electric_output_geo + electric_output_waterfall
    st.write(f"**Total electricity generated by both systems: {total_electricity_generated:,.2f} W**")

    # Plot the contributions
    sources = ['Geothermal + Wasted Energy', 'Waterfall Turbine']
    values = [electric_output_geo, electric_output_waterfall]

    fig, ax = plt.subplots()
    bars = ax.bar(sources, values, color=['#FF8C00', '#1E90FF'])
    ax.set_ylabel('Electricity Output (Watts)')
    ax.set_title('Electricity Generation by Source')
    ax.bar_label(bars, fmt='%.0f W')
    st.pyplot(fig)

if __name__ == "__main__":
    main()

   